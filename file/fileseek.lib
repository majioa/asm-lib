;EXTRN COMPARE_STRING
FIND_SEEK	PROC;
	;DX - LEN OF STRING
	;ES:DI - STRING
	PUSH	SI
	PUSH	DS
	MOV	WORD PTR CS:[NEXT_RECORD_],0FFFFH
	MOV	SI,CS:[FILE_BUFFER_OFF_]
	MOV	DS,CS:[FILE_BUFFER_SEG_]
FILE_SEEK_3
	CALL	FILE_SHIFT
	OR	CX,CX
	JZ	FILE_SEEK_4
FILE_SEEK_1:
	PUSH	CX
	MOV	CX,DX
	CALL	COMPARE_STRING
	POP	CX
	JNC	FILE_SEEK_2
	INC	SI
	DEC	DX
	LOOP	FILE_SEEK_1
	CMP	CX,DX
	JZ	FILE_SEEK_3
FILE_SEEK_4:
	STC
FILE_SEEK_2:
	PUSHF
	MOV	BX,CS:[NUM_CURRENT_RECORD_]
	DEC	BX
	NEG	CX
	MOV	SI,CS:[LEN_RECORD_]
	NEG	SI
	SUB	CX,SI
	POPF
	POP	DS
	POP	SI
	RET
	;BX - NUM OF RECORDS 
	;CX - SHIFT IN RECORD
ENDP
FILE_SHIFT	PROC
	;DS:SI - BUF
	CMP	CS:[NEXT_RECORD_],0FFFFH
	JZ	FILE_SHIFT_1
	CMP	CS:[NEXT_RECORD_],0
	JZ	FILE_SHIFT_2
	CALL	FILE_SHIFT_COPY
FILE_SHIFT_1:
	CALL	LOAD_RECORD
FILE_SHIFT_2:
	XCHG	CS:[NEXT_RECORD_],CX
	CMP	CX,0FFFFH
	JZ	FILE_SHIFT_1
	RET
	;DS:SI - NEW BUF
	;CX - LEN OF NEW RECORD
	;DX - LEN OF AREA OF ONE RECORD
NEXT_RECORD_	DW	0
NUM_CURRENT_RECORD_	DW	0
ENDP
LOAD_RECORD	PROC
	PUSH	BX
	MOV	CX,CS:[LEN_RECORD_]
	MOV	AH,3FH
	MOV	BX,CS:[LOG_]
	INT	21H
	INC	WORD PTR CS:[NUM_CURRENT_RECORD_]
	MOV	CX,AX
	POP	BX
	RET
	;CX - LEN OF NEW RECORD
LOG_	DW	0
LEN_RECORD_	DW	8000H
ENDP
FILE_SHIFT_COPY	PROC
	;DS:SI - BUF
	PUSH	BX
	PUSH	CX
	PUSH	DI
	PUSH	ES
	MOV	CL,4
	MOV	AX,DS
	MOV	BX,CS:[LEN_RECORD_]
	PUSH	BX
	SHR	BX,CL
	SUB	AX,BX
	MOV	DS,AX
	MOV	DI,SI
	POP	CX
	PUSH	DI
	PUSH	DS
	REP	MOVSB
	POP	DS
	POP	SI
	POP	ES
	POP	DI
	POP	CX
	POP	BX
	RET
	;DS:SI - NEW BUF
ENDP
